> custom property binding
	-between two components having parent child relationship
	-binds the custom property of component class in view template of parent class.
	-use @input decorator in child component and define poperty there
	- use that property in parent component as attribute in component selector of child class.
	- doing that we can assign any value of parent class in component selector
	-in this way data will flow from parent component to child component...

> custom event binding
	-using *ngModel for two way binding
	-send data from child component to parent component

> services is basically a reusable component.
  api call is made in services .
  always used on components.


> in a module
	-declaration has components
	-imports has module names
	-provides have services, pipe etc whatever we will create
	-bootstrap has the component which will load first

> decorator class automatically gets loaded without creating object.


> viewProvider
.	- to call a class at component level.
.	-this class wont load until its object is created.
.	-this class wont get used/load until the component is used.(kind of merit)
.
.
> if we want to call/use a class at module level ..then provide name in app.module.ts>providers.
	--this class will automatically load when module gets loaded.(kind of demerit, make app slow)



> encapsulation
	-to use parent css in child or vice versa
	-a metadata of component


>send data from child to parent
	-call a method in child.component.html file to get the data/value.
		-then
	-define this method in child.component.ts and create a custom event using EventEmitter class.
	-emit the value uisng that custom event in method.
		-then
	-recieve this event in parent component..this event has value
	-to get that value we called a method from this event using ($event) as value for this method....(customevent)= "getvalue($event)"
	-now define this method in parent.compinent.ts and get the value in a variable and use it as ypu want.